// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/jobModule/jobModule.proto

package pbJobModule

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for JobModule service

func NewJobModuleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for JobModule service

type JobModuleService interface {
	Login(ctx context.Context, in *Staff, opts ...client.CallOption) (*Staff, error)
	UpdateStaff(ctx context.Context, in *Staff, opts ...client.CallOption) (*OperationResult, error)
	AddStaff(ctx context.Context, in *Staff, opts ...client.CallOption) (*OperationResult, error)
	QueryListStaff(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListStaff, error)
	QueryListUser(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListUser, error)
	QueryNoJobOrder(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListQueryOrder, error)
	CreateJob(ctx context.Context, in *Job, opts ...client.CallOption) (*OperationResult, error)
	CreateTask(ctx context.Context, in *Task, opts ...client.CallOption) (*OperationResult, error)
	QueryTask(ctx context.Context, in *Task, opts ...client.CallOption) (*ListTask, error)
	QueryMostPopular(ctx context.Context, in *Empty, opts ...client.CallOption) (*MostPopular, error)
	QueryTotalSales(ctx context.Context, in *Empty, opts ...client.CallOption) (*TotalSales, error)
}

type jobModuleService struct {
	c    client.Client
	name string
}

func NewJobModuleService(name string, c client.Client) JobModuleService {
	return &jobModuleService{
		c:    c,
		name: name,
	}
}

func (c *jobModuleService) Login(ctx context.Context, in *Staff, opts ...client.CallOption) (*Staff, error) {
	req := c.c.NewRequest(c.name, "JobModule.Login", in)
	out := new(Staff)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) UpdateStaff(ctx context.Context, in *Staff, opts ...client.CallOption) (*OperationResult, error) {
	req := c.c.NewRequest(c.name, "JobModule.UpdateStaff", in)
	out := new(OperationResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) AddStaff(ctx context.Context, in *Staff, opts ...client.CallOption) (*OperationResult, error) {
	req := c.c.NewRequest(c.name, "JobModule.AddStaff", in)
	out := new(OperationResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) QueryListStaff(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListStaff, error) {
	req := c.c.NewRequest(c.name, "JobModule.QueryListStaff", in)
	out := new(ListStaff)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) QueryListUser(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListUser, error) {
	req := c.c.NewRequest(c.name, "JobModule.QueryListUser", in)
	out := new(ListUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) QueryNoJobOrder(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListQueryOrder, error) {
	req := c.c.NewRequest(c.name, "JobModule.QueryNoJobOrder", in)
	out := new(ListQueryOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) CreateJob(ctx context.Context, in *Job, opts ...client.CallOption) (*OperationResult, error) {
	req := c.c.NewRequest(c.name, "JobModule.CreateJob", in)
	out := new(OperationResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) CreateTask(ctx context.Context, in *Task, opts ...client.CallOption) (*OperationResult, error) {
	req := c.c.NewRequest(c.name, "JobModule.CreateTask", in)
	out := new(OperationResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) QueryTask(ctx context.Context, in *Task, opts ...client.CallOption) (*ListTask, error) {
	req := c.c.NewRequest(c.name, "JobModule.QueryTask", in)
	out := new(ListTask)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) QueryMostPopular(ctx context.Context, in *Empty, opts ...client.CallOption) (*MostPopular, error) {
	req := c.c.NewRequest(c.name, "JobModule.QueryMostPopular", in)
	out := new(MostPopular)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobModuleService) QueryTotalSales(ctx context.Context, in *Empty, opts ...client.CallOption) (*TotalSales, error) {
	req := c.c.NewRequest(c.name, "JobModule.QueryTotalSales", in)
	out := new(TotalSales)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobModule service

type JobModuleHandler interface {
	Login(context.Context, *Staff, *Staff) error
	UpdateStaff(context.Context, *Staff, *OperationResult) error
	AddStaff(context.Context, *Staff, *OperationResult) error
	QueryListStaff(context.Context, *Empty, *ListStaff) error
	QueryListUser(context.Context, *Empty, *ListUser) error
	QueryNoJobOrder(context.Context, *Empty, *ListQueryOrder) error
	CreateJob(context.Context, *Job, *OperationResult) error
	CreateTask(context.Context, *Task, *OperationResult) error
	QueryTask(context.Context, *Task, *ListTask) error
	QueryMostPopular(context.Context, *Empty, *MostPopular) error
	QueryTotalSales(context.Context, *Empty, *TotalSales) error
}

func RegisterJobModuleHandler(s server.Server, hdlr JobModuleHandler, opts ...server.HandlerOption) error {
	type jobModule interface {
		Login(ctx context.Context, in *Staff, out *Staff) error
		UpdateStaff(ctx context.Context, in *Staff, out *OperationResult) error
		AddStaff(ctx context.Context, in *Staff, out *OperationResult) error
		QueryListStaff(ctx context.Context, in *Empty, out *ListStaff) error
		QueryListUser(ctx context.Context, in *Empty, out *ListUser) error
		QueryNoJobOrder(ctx context.Context, in *Empty, out *ListQueryOrder) error
		CreateJob(ctx context.Context, in *Job, out *OperationResult) error
		CreateTask(ctx context.Context, in *Task, out *OperationResult) error
		QueryTask(ctx context.Context, in *Task, out *ListTask) error
		QueryMostPopular(ctx context.Context, in *Empty, out *MostPopular) error
		QueryTotalSales(ctx context.Context, in *Empty, out *TotalSales) error
	}
	type JobModule struct {
		jobModule
	}
	h := &jobModuleHandler{hdlr}
	return s.Handle(s.NewHandler(&JobModule{h}, opts...))
}

type jobModuleHandler struct {
	JobModuleHandler
}

func (h *jobModuleHandler) Login(ctx context.Context, in *Staff, out *Staff) error {
	return h.JobModuleHandler.Login(ctx, in, out)
}

func (h *jobModuleHandler) UpdateStaff(ctx context.Context, in *Staff, out *OperationResult) error {
	return h.JobModuleHandler.UpdateStaff(ctx, in, out)
}

func (h *jobModuleHandler) AddStaff(ctx context.Context, in *Staff, out *OperationResult) error {
	return h.JobModuleHandler.AddStaff(ctx, in, out)
}

func (h *jobModuleHandler) QueryListStaff(ctx context.Context, in *Empty, out *ListStaff) error {
	return h.JobModuleHandler.QueryListStaff(ctx, in, out)
}

func (h *jobModuleHandler) QueryListUser(ctx context.Context, in *Empty, out *ListUser) error {
	return h.JobModuleHandler.QueryListUser(ctx, in, out)
}

func (h *jobModuleHandler) QueryNoJobOrder(ctx context.Context, in *Empty, out *ListQueryOrder) error {
	return h.JobModuleHandler.QueryNoJobOrder(ctx, in, out)
}

func (h *jobModuleHandler) CreateJob(ctx context.Context, in *Job, out *OperationResult) error {
	return h.JobModuleHandler.CreateJob(ctx, in, out)
}

func (h *jobModuleHandler) CreateTask(ctx context.Context, in *Task, out *OperationResult) error {
	return h.JobModuleHandler.CreateTask(ctx, in, out)
}

func (h *jobModuleHandler) QueryTask(ctx context.Context, in *Task, out *ListTask) error {
	return h.JobModuleHandler.QueryTask(ctx, in, out)
}

func (h *jobModuleHandler) QueryMostPopular(ctx context.Context, in *Empty, out *MostPopular) error {
	return h.JobModuleHandler.QueryMostPopular(ctx, in, out)
}

func (h *jobModuleHandler) QueryTotalSales(ctx context.Context, in *Empty, out *TotalSales) error {
	return h.JobModuleHandler.QueryTotalSales(ctx, in, out)
}
