// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/login/login.proto

package pbLogin

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Login service

func NewLoginEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Login service

type LoginService interface {
	GenerateCaptcha(ctx context.Context, in *Empty, opts ...client.CallOption) (*Captcha, error)
	Register(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*OperationResult, error)
	Update(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*OperationResult, error)
	Query(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error)
	Login(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error)
}

type loginService struct {
	c    client.Client
	name string
}

func NewLoginService(name string, c client.Client) LoginService {
	return &loginService{
		c:    c,
		name: name,
	}
}

func (c *loginService) GenerateCaptcha(ctx context.Context, in *Empty, opts ...client.CallOption) (*Captcha, error) {
	req := c.c.NewRequest(c.name, "Login.GenerateCaptcha", in)
	out := new(Captcha)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Register(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*OperationResult, error) {
	req := c.c.NewRequest(c.name, "Login.Register", in)
	out := new(OperationResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Update(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*OperationResult, error) {
	req := c.c.NewRequest(c.name, "Login.Update", in)
	out := new(OperationResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Query(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "Login.Query", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) Login(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "Login.Login", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginHandler interface {
	GenerateCaptcha(context.Context, *Empty, *Captcha) error
	Register(context.Context, *UserInfo, *OperationResult) error
	Update(context.Context, *UserInfo, *OperationResult) error
	Query(context.Context, *UserInfo, *UserInfo) error
	Login(context.Context, *UserInfo, *UserInfo) error
}

func RegisterLoginHandler(s server.Server, hdlr LoginHandler, opts ...server.HandlerOption) error {
	type login interface {
		GenerateCaptcha(ctx context.Context, in *Empty, out *Captcha) error
		Register(ctx context.Context, in *UserInfo, out *OperationResult) error
		Update(ctx context.Context, in *UserInfo, out *OperationResult) error
		Query(ctx context.Context, in *UserInfo, out *UserInfo) error
		Login(ctx context.Context, in *UserInfo, out *UserInfo) error
	}
	type Login struct {
		login
	}
	h := &loginHandler{hdlr}
	return s.Handle(s.NewHandler(&Login{h}, opts...))
}

type loginHandler struct {
	LoginHandler
}

func (h *loginHandler) GenerateCaptcha(ctx context.Context, in *Empty, out *Captcha) error {
	return h.LoginHandler.GenerateCaptcha(ctx, in, out)
}

func (h *loginHandler) Register(ctx context.Context, in *UserInfo, out *OperationResult) error {
	return h.LoginHandler.Register(ctx, in, out)
}

func (h *loginHandler) Update(ctx context.Context, in *UserInfo, out *OperationResult) error {
	return h.LoginHandler.Update(ctx, in, out)
}

func (h *loginHandler) Query(ctx context.Context, in *UserInfo, out *UserInfo) error {
	return h.LoginHandler.Query(ctx, in, out)
}

func (h *loginHandler) Login(ctx context.Context, in *UserInfo, out *UserInfo) error {
	return h.LoginHandler.Login(ctx, in, out)
}
