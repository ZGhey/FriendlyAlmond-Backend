// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/configuration/config.proto

package pbConfig

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Configuration service

func NewConfigurationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Configuration service

type ConfigurationService interface {
	QueryBoat(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListBoat, error)
	QueryCategory(ctx context.Context, in *Boat, opts ...client.CallOption) (*ListCategory, error)
	QueryComponent(ctx context.Context, in *Category, opts ...client.CallOption) (*ListComponent, error)
	QueryPackage(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListPackage, error)
	QuerySection(ctx context.Context, in *Category, opts ...client.CallOption) (*ListSection, error)
	QuerySupplier(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListSupplier, error)
}

type configurationService struct {
	c    client.Client
	name string
}

func NewConfigurationService(name string, c client.Client) ConfigurationService {
	return &configurationService{
		c:    c,
		name: name,
	}
}

func (c *configurationService) QueryBoat(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListBoat, error) {
	req := c.c.NewRequest(c.name, "Configuration.QueryBoat", in)
	out := new(ListBoat)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) QueryCategory(ctx context.Context, in *Boat, opts ...client.CallOption) (*ListCategory, error) {
	req := c.c.NewRequest(c.name, "Configuration.QueryCategory", in)
	out := new(ListCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) QueryComponent(ctx context.Context, in *Category, opts ...client.CallOption) (*ListComponent, error) {
	req := c.c.NewRequest(c.name, "Configuration.QueryComponent", in)
	out := new(ListComponent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) QueryPackage(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListPackage, error) {
	req := c.c.NewRequest(c.name, "Configuration.QueryPackage", in)
	out := new(ListPackage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) QuerySection(ctx context.Context, in *Category, opts ...client.CallOption) (*ListSection, error) {
	req := c.c.NewRequest(c.name, "Configuration.QuerySection", in)
	out := new(ListSection)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationService) QuerySupplier(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListSupplier, error) {
	req := c.c.NewRequest(c.name, "Configuration.QuerySupplier", in)
	out := new(ListSupplier)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Configuration service

type ConfigurationHandler interface {
	QueryBoat(context.Context, *Empty, *ListBoat) error
	QueryCategory(context.Context, *Boat, *ListCategory) error
	QueryComponent(context.Context, *Category, *ListComponent) error
	QueryPackage(context.Context, *Empty, *ListPackage) error
	QuerySection(context.Context, *Category, *ListSection) error
	QuerySupplier(context.Context, *Empty, *ListSupplier) error
}

func RegisterConfigurationHandler(s server.Server, hdlr ConfigurationHandler, opts ...server.HandlerOption) error {
	type configuration interface {
		QueryBoat(ctx context.Context, in *Empty, out *ListBoat) error
		QueryCategory(ctx context.Context, in *Boat, out *ListCategory) error
		QueryComponent(ctx context.Context, in *Category, out *ListComponent) error
		QueryPackage(ctx context.Context, in *Empty, out *ListPackage) error
		QuerySection(ctx context.Context, in *Category, out *ListSection) error
		QuerySupplier(ctx context.Context, in *Empty, out *ListSupplier) error
	}
	type Configuration struct {
		configuration
	}
	h := &configurationHandler{hdlr}
	return s.Handle(s.NewHandler(&Configuration{h}, opts...))
}

type configurationHandler struct {
	ConfigurationHandler
}

func (h *configurationHandler) QueryBoat(ctx context.Context, in *Empty, out *ListBoat) error {
	return h.ConfigurationHandler.QueryBoat(ctx, in, out)
}

func (h *configurationHandler) QueryCategory(ctx context.Context, in *Boat, out *ListCategory) error {
	return h.ConfigurationHandler.QueryCategory(ctx, in, out)
}

func (h *configurationHandler) QueryComponent(ctx context.Context, in *Category, out *ListComponent) error {
	return h.ConfigurationHandler.QueryComponent(ctx, in, out)
}

func (h *configurationHandler) QueryPackage(ctx context.Context, in *Empty, out *ListPackage) error {
	return h.ConfigurationHandler.QueryPackage(ctx, in, out)
}

func (h *configurationHandler) QuerySection(ctx context.Context, in *Category, out *ListSection) error {
	return h.ConfigurationHandler.QuerySection(ctx, in, out)
}

func (h *configurationHandler) QuerySupplier(ctx context.Context, in *Empty, out *ListSupplier) error {
	return h.ConfigurationHandler.QuerySupplier(ctx, in, out)
}
